(()=>{"use strict";const t=class{constructor(...t){for(let i=0;i<t.length;i+=1)this[`x${i}`]=t[i];this.dim=t.length}add(t){if(t.dim!==this.dim)throw new Error("Cannot sum vectors of different dimension.");for(let i=0;i<this.dim;i+=1)this[`x${i}`]+=t[`x${i}`]}scale(t){for(let i=0;i<this.dim;i+=1)this[`x${i}`]*=t}dotProduct(t){if(t.dim!==this.dim)throw new Error("Cannot sum vectors of different dimension.");{let i=0;for(let e=0;e<this.dim;e+=1)i+=this[`x${e}`]*t[`x${e}`];return i}}map(t){for(let i=0;i<this.dim;i+=1)this[`x${i}`]=t(this[`x${i}`])}toArray(){const t=[];for(let i=0;i<this.dim;i+=1)t.push(this[`x${i}`]);return t}distSquared(t=!1){if(!1===t){let t=0;for(let i=0;i<this.dim;i+=1)t+=this[`x${i}`]**2;return t}let i=0;for(let e=0;e<this.dim;e+=1)i+=(this[`x${e}`]-t[`x${e}`])**2;return i}mutateR2(){const t=2*Math.random()-1,i=2*Math.random()-1;t**2+i**2<=1?(this.x0=t,this.x1=i):this.mutateR2()}};function i(i){if("right"===i)return new t(0,1);if("left"===i)return new t(0,-1);if("up"===i)return new t(-1,0);if("down"===i)return new t(1,0);throw Error("Invalid direction in dirVect")}const e=function(){const e={ships:[],area:[]};for(let t=0;t<10;t+=1)e.area.push([]);return e.area.forEach((t=>{for(let i=0;i<10;i+=1)t.push({ship:null,hit:!1})})),e.checkSlots=function(e,r,s,h){const n=i(h),o=new t(e,r);for(let t=0;t<s;t+=1){if(!this.area[o.x0][o.x1])return!1;if(this.area[o.x0][o.x1].ship)return!1;o.add(n)}return!0},e.placeShip=function(e,r,s,h){if(this.checkSlots(e,r,s,h)){const n=function(t){return{hits:0,length:t,dead:!1,hit:function(){this.hits+=1,this.hits===this.length&&(this.dead=!0)}}}(s);this.ships.push(n);const o=i(h),c=new t(e,r);for(let t=0;t<s;t+=1)this.area[c.x0][c.x1].ship=n,c.add(o);return!0}return!1},e.receiveAttack=function(t,i){this.area[t][i].hit=!0,this.area[t][i].ship&&this.area[t][i].ship.hit()},e.checkLoss=function(){if(this.ships.length>0){let t=0;if(this.ships.forEach((i=>{!0===i.dead&&(t+=1)})),t===this.ships.length)return!0}return!1},e}();e.placeShip(9,9,5,"left"),e.receiveAttack(9,6),e.receiveAttack(9,7),e.receiveAttack(9,8),e.receiveAttack(9,9),e.receiveAttack(9,5),console.log(e.checkLoss())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,